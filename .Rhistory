?foreach
library(foreach)
?foreach
doParallel
library(doParallel)
?doParallel
for loop
?jsonlite
libraru(jsonlite)
library(jsonlite)
?jsonlite
library(httr)
?httr
remove.packages("httr")
library(httr)
library(httr)
.lib
.libPaths().
.libPaths()
library(httr)
remove.packages("jsonlite")
library(jsonlite)
rm(list = ls())
# ===============================================================================
#    Load libraries
# ===============================================================================
# create a function to check dependencies and install packages if they are not already installed
check_package <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(package, dependencies = TRUE)
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
# check dependencies and install packages if they are not already installed
packages <- c("optparse", "data.table", "tidyverse", "httr", "jsonlite", "xml2", "foreach", "doParallel")
load_packages <- lapply(packages, check_package)
option_list <- list(
make_option("--input_dir", type = "character", default = NA,
help = "directory with the input vcf"),
make_option(c("-I", "--input"), type = "character", default = NA,
help = "vcf file to be processed", metavar = "character"),
make_option(c("-M", "--getmeta"), type = "logical", default = FALSE,
help = "output meta data", metavar = "logical"),
make_option(c("-F", "--getinfo"), type = "logical", default = FALSE,
help = "output info fields", metavar = "logical"),
make_option(c("-G", "--getformat"), type = "logical", default = FALSE,
help = "output format fields", metavar = "logical")
)
# parses command line options
opt <- parse_args(OptionParser(option_list = option_list))
# clear workspace
rm(list = ls())
# ===============================================================================
#    Load libraries
# ===============================================================================
# create a function to check dependencies and install packages if they are not already installed
check_package <- function(package) {
if (!require(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)) {
install.packages(package, dependencies = TRUE, repos = 'http://cran.us.r-project.org')
library(package, character.only = TRUE, quietly = TRUE, warn.conflicts = FALSE)
}
}
# check dependencies and install packages if they are not already installed
packages <- c("optparse", "data.table", "tidyverse", "httr", "jsonlite", "xml2", "foreach", "doParallel")
load_packages <- lapply(packages, check_package)
# create command line option lists
option_list <- list(
make_option("--input_dir", type = "character", default = NA,
help = "directory with the input vcf"),
make_option(c("-I", "--input"), type = "character", default = NA,
help = "vcf file to be processed", metavar = "character"),
make_option(c("-M", "--getmeta"), type = "logical", default = FALSE,
help = "output meta data", metavar = "logical"),
make_option(c("-F", "--getinfo"), type = "logical", default = FALSE,
help = "output info fields", metavar = "logical"),
make_option(c("-G", "--getformat"), type = "logical", default = FALSE,
help = "output format fields", metavar = "logical"),
make_option(c("-DP", "--totalread"), type = "character", default = "DP",
help = "format field total read depth", metavar = "character"),
make_option(c("-RO", "--refread"), type = "character", default = "RO",
help = "format field reference allele read depth", metavar = "character"),
make_option(c("-AO", "--altread"), type = "character", default = "AO",
help = "format field alternative allele read depth", metavar = "character"),
make_option(c("-TYPE", "--varianttype"), type = "character", default = "TYPE",
help = "format field variant type", metavar = "character")
)
# create command line option lists
option_list <- list(
make_option("--input_dir", type = "character", default = NA,
help = "directory with the input vcf"),
make_option(c("-I", "--input"), type = "character", default = NA,
help = "vcf file to be processed", metavar = "character"),
make_option(c("-M", "--getmeta"), type = "logical", default = FALSE,
help = "output meta data", metavar = "logical"),
make_option(c("-F", "--getinfo"), type = "logical", default = FALSE,
help = "output info fields", metavar = "logical"),
make_option(c("-G", "--getformat"), type = "logical", default = FALSE,
help = "output format fields", metavar = "logical"),
make_option("--totalread", type = "character", default = "DP",
help = "format field total read depth", metavar = "character"),
make_option("--refread", type = "character", default = "RO",
help = "format field reference allele read depth", metavar = "character"),
make_option("--altread", type = "character", default = "AO",
help = "format field alternative allele read depth", metavar = "character"),
make_option("--varianttype", type = "character", default = "TYPE",
help = "format field variant type", metavar = "character")
)
# parses command line options
opt <- parse_args(OptionParser(option_list = option_list))
c(opt$DP, opt$TYPE, opt$RO, opt$AO)
opt
c(opt$totalread, opt$varianttype, opt$refread, opt$altread)
remove.packages(optparse)
remove.packages("optparse")
remove.packages("data.table")
remove.packages("tidyverse")
remove.packages("httr")
remove.packages("jsonlite")
remove.packages("xml2")
remove.packages("foreach")
remove.packages("doParallel")
